<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xunit on My External Storage</title>
    <link>https://budougumi0617.github.io/tags/xunit/</link>
    <description>Recent content in Xunit on My External Storage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Tue, 25 Jul 2017 20:46:26 +0900</lastBuildDate>
    <atom:link href="/tags/xunit/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>.NET Standard1.6プロジェクトのCI環境を構築する。</title>
      <link>https://budougumi0617.github.io/post/2017/07/25/ci-for-dotnet16/</link>
      <pubDate>Tue, 25 Jul 2017 20:46:26 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/25/ci-for-dotnet16/</guid>
      <description>TL;DR .NET Standard1.6ベースでNugetパッケージを作っています。開発で利用しているCI環境の構築方法です。実際に利用しているリポジトリは以下になります。
 
https://github.com/budougumi0617/Testable
現状出来ているのは以下です。git tagで自動パッケージリリースなども追って対応していきたいなと思っています。
 GitHubのリポジトリが更新されたとき、自動でビルドが実施される。 ビルド時にリポジトリに同梱されているテストプロジェクトが自動で実行される。 テストのカバレッジを計測し、Codecovで結果を可視化する。 バッジでビルド結果とカバレッジ率がわかる。  .NET Standard1.6(VS2017)環境で構築したプロジェクト向けの記事なので、その他の環境の場合はまず公式サイトなどを参考にしてください。
CodeCov Test Coverage Integration
AppVeyorとCodecovを使ってC#のコードカバレッジを計測する
構築手順 利用ツール/サービス 基本的に無料のツールで構築していきます。
   用途 ツール名     IDE Visual Studio2017/Visual Studio for Mac   テスト XUnit/OpenCover   構成管理 GitHub   CI AppVeyor/Coveralls    以降では、GitHubリポジトリに.NET1.6プロジェクトが入った状態のあとの説明です。
XUnitプロジェクトを作成する。 まず、以下の記事を参考に、テストプロジェクトを作成してください。
.NET StandardプロジェクトをxUnitでテストする方法
VS for Macの場合は、「新しいプロジェクトの追加」から、「xUnit Test Project」を選択することで同等のプロジェクトを作成することができます。.NET1.6プロジェクトを参照するテストプロジェクトを作成する場合は.NET Coreプロジェクトで作るのが無難です。
その後、カバレッジ計測に必要な、xunit.runner.consoleとOpenCoverもNugetからテストプロジェクトに追加しておいてください。全てを行うと、テストプロジェクトの.csprojファイルには以下のパッケージが追加されているはずです。
&amp;lt;ItemGroup&amp;gt; &amp;lt;PackageReference Include=&amp;quot;Microsoft.NET.Test.Sdk&amp;quot; Version=&amp;quot;15.</description>
    </item>
    
    <item>
      <title>VS for MacのテストエクスプローラーからXUnit(.NET Core1.1)が実行できない</title>
      <link>https://budougumi0617.github.io/post/2017/07/17/cannot-execute-xunit/</link>
      <pubDate>Mon, 17 Jul 2017 23:41:03 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/17/cannot-execute-xunit/</guid>
      <description>TL;DR Visual Studio for MacからXUnitプロジェクトのテストが実行できないときは、コンソールからdotnet testコマンドを実行してみて出力を確認してみます。
XUnit(.NET Core1.1)が実行できない Visual Studio for Macの「単体テスト」ウインドウの「テストの実行」操作から、別PCで作成した.NET Core1.1`プロジェクトのXUnitを動かそうとしたのですが、実行が終わらない、「テスト結果」ウインドウの「出力」にも何も表示されない状態になりました。
解決方法 2017/07/17時点のVisual Studio for Macは、.NET Core1.1形式のXUnitプロジェクトの実行にdotnet test`コマンドを利用しています。ターミナルから左記のコマンドを実行することで、Visual Studio for Macのバックグラウンドで何が起きているか、原因を探ることができます。
dotnet-test
コマンドを実行した結果、私の場合は、.NET Core1.1.2がインストールされていないことが原因でした(.NET Core1.1.1だと動かなかった)。
$ dotnet test TestProject/TestProject.csproj ... The specified framework &#39;Microsoft.NETCore.App&#39;, version &#39;1.1.2&#39; was not found. - Check application dependencies and target a framework version installed at: /opt/dotnet/shared/Microsoft.NETCore.App - The following versions are installed: 1.1.1 - Alternatively, install the framework version &#39;1.1.2&#39;.  .NET Coreは2.</description>
    </item>
    
  </channel>
</rss>
