<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My External Storage</title>
    <link>https://budougumi0617.github.io/post/</link>
    <description>Recent content in Posts on My External Storage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 04 Aug 2017 08:59:08 +0900</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Xmarin.Macアプリでネイティブメソッドの動的ロードを含むビルドを行う</title>
      <link>https://budougumi0617.github.io/post/2017/08/04/xamarin-link-flags/</link>
      <pubDate>Fri, 04 Aug 2017 08:59:08 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/08/04/xamarin-link-flags/</guid>
      <description>ネイティブライブラリの動的ロードを含むXamarin.Macアプリを作ろうとしたら、ビルドエラーに遭遇しました。
TL;DR  MMP : error MM5109: Native linking failed with error code 1というビルドエラーを解決したい。 プロジェクトオプション-「Mac Build」タブ-「追加のmmp引数」に「--link_flags=&amp;quot;-Wl,-undefined,dynamic_lookup&amp;quot;」と設定する。 Xamarin.Macアプリのプロジェクトに、動的ロードで解決するメソッドが含まれていてもビルド出来るようになる。  MMP : error MM5109: Native linking failed with error code 1 Xamarin.Macプロジェクトをビルドするとき、C#のアプリをネイティブアプリに変換する処理が走ります。このとき、C#の中でネイティブライブラリを動的にロードしているようなプロジェクトは以下のようなエラーでビルドが止まることがあります。_C_FooFunction、_C_BarFunctionは動的にロードするライブラリの中で宣言されているメソッドです。
Target _CompileToNative: ... xcrun -sdk macosx clang -g -mmacosx-version-min=10.12 -arch x86_64 -fobjc-runtime=macosx -ObjC -u _C_FooFuncion -u _C_BarFunction .... Undefined symbols for architecture x86_64: &amp;quot;_C_FooFunction&amp;quot;, referenced from: -u command line option &amp;quot;_C_BarFunction&amp;quot;, referenced from: -u command line option ... ld: symbol(s) not found for architecture x86_64 clang : error : linker command failed with exit code 1 (use -v to see invocation) MMP : error MM5109: Native linking failed with error code 1.</description>
    </item>
    
    <item>
      <title>Xamarin.Macプロジェクトのオプションにある「追加のmmp引数」に指定できる値</title>
      <link>https://budougumi0617.github.io/post/2017/07/26/xamarin-mmp/</link>
      <pubDate>Wed, 26 Jul 2017 22:24:00 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/26/xamarin-mmp/</guid>
      <description>TL;DR Visual Studio for MacでCocoa Appのプロジェクトをビルドするとき、「追加のmmp引数」を設定しておくと.appファイルを作成するときに詳細なオプションが渡せます。.csprojファイル内では&amp;lt;MonoBundlingExtraArgs&amp;gt;の属性です。指定できる引数は以下のコマンドで確認することが出来ます。
$ /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/bin/mmp -? Copyright 2010 Novell Inc. Copyright 2011-2016 Xamarin Inc. Usage: mmp [options] application-exe -h, -?, --help Displays the help --version Output version information and exit. -f, --force Forces the recompilation of code, regardless of etc...  追加のmmp引数という謎のオプション Visual Studio for MacでCocoa Appプロジェクトを作成すると、プロジェクトのプロジェクトオプションに、「Mac Build」という項目があります。このオプション一覧には「追加のmmp引数」というテキストフィールドのオプションがあるのですが、バルーンヘルプを見ても「アプリケーションバンドルツールmmpに渡される追加のコマンドライン引数」としか出てきません。バリデーションもなく、基本なんでも入力できるので、正直何に使うのかよくわかっていませんでした。
Xamarinの公式ページなどでも少し触れられている程度です。
Xamarin.Mac Internals#Enabling the Partial Static Registrar
 The Partial Static Registrar is enabled in Xamarin.Mac by double-clicking the Project Name in the Solution Explorer, navigating to Mac Build and adding &amp;ndash;registrar:static to the Additional mmp arguments: field.</description>
    </item>
    
    <item>
      <title>.NET Standard1.6プロジェクトのCI環境を構築する。</title>
      <link>https://budougumi0617.github.io/post/2017/07/25/ci-for-dotnet16/</link>
      <pubDate>Tue, 25 Jul 2017 20:46:26 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/25/ci-for-dotnet16/</guid>
      <description>TL;DR .NET Standard1.6ベースでNugetパッケージを作っています。開発で利用しているCI環境の構築方法です。実際に利用しているリポジトリは以下になります。
 
https://github.com/budougumi0617/Testable
現状出来ているのは以下です。git tagで自動パッケージリリースなども追って対応していきたいなと思っています。
 GitHubのリポジトリが更新されたとき、自動でビルドが実施される。 ビルド時にリポジトリに同梱されているテストプロジェクトが自動で実行される。 テストのカバレッジを計測し、Codecovで結果を可視化する。 バッジでビルド結果とカバレッジ率がわかる。  .NET Standard1.6(VS2017)環境で構築したプロジェクト向けの記事なので、その他の環境の場合はまず公式サイトなどを参考にしてください。
CodeCov Test Coverage Integration
AppVeyorとCodecovを使ってC#のコードカバレッジを計測する
構築手順 利用ツール/サービス 基本的に無料のツールで構築していきます。
   用途 ツール名     IDE Visual Studio2017/Visual Studio for Mac   テスト XUnit/OpenCover   構成管理 GitHub   CI AppVeyor/Codecov    以降では、GitHubリポジトリに.NET1.6プロジェクトが入った状態のあとの説明です。
XUnitプロジェクトを作成する。 まず、以下の記事を参考に、テストプロジェクトを作成してください。
.NET StandardプロジェクトをxUnitでテストする方法
VS for Macの場合は、「新しいプロジェクトの追加」から、「xUnit Test Project」を選択することで同等のプロジェクトを作成することができます。.NET1.6プロジェクトを参照するテストプロジェクトを作成する場合は.NET Coreプロジェクトで作るのが無難です。
その後、カバレッジ計測に必要な、xunit.runner.consoleとOpenCoverもNugetからテストプロジェクトに追加しておいてください。全てを行うと、テストプロジェクトの.csprojファイルには以下のパッケージが追加されているはずです。
&amp;lt;ItemGroup&amp;gt; &amp;lt;PackageReference Include=&amp;quot;Microsoft.NET.Test.Sdk&amp;quot; Version=&amp;quot;15.</description>
    </item>
    
    <item>
      <title>VS for MacのテストエクスプローラーからXUnit(.NET Core1.1)が実行できない</title>
      <link>https://budougumi0617.github.io/post/2017/07/17/cannot-execute-xunit/</link>
      <pubDate>Mon, 17 Jul 2017 23:41:03 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/17/cannot-execute-xunit/</guid>
      <description>TL;DR Visual Studio for MacからXUnitプロジェクトのテストが実行できないときは、コンソールからdotnet testコマンドを実行してみて出力を確認してみます。
XUnit(.NET Core1.1)が実行できない Visual Studio for Macの「単体テスト」ウインドウの「テストの実行」操作から、別PCで作成した.NET Core1.1`プロジェクトのXUnitを動かそうとしたのですが、実行が終わらない、「テスト結果」ウインドウの「出力」にも何も表示されない状態になりました。
解決方法 2017/07/17時点のVisual Studio for Macは、.NET Core1.1形式のXUnitプロジェクトの実行にdotnet test`コマンドを利用しています。ターミナルから左記のコマンドを実行することで、Visual Studio for Macのバックグラウンドで何が起きているか、原因を探ることができます。
dotnet-test
コマンドを実行した結果、私の場合は、.NET Core1.1.2がインストールされていないことが原因でした(.NET Core1.1.1だと動かなかった)。
$ dotnet test TestProject/TestProject.csproj ... The specified framework &#39;Microsoft.NETCore.App&#39;, version &#39;1.1.2&#39; was not found. - Check application dependencies and target a framework version installed at: /opt/dotnet/shared/Microsoft.NETCore.App - The following versions are installed: 1.1.1 - Alternatively, install the framework version &#39;1.1.2&#39;.  .NET Coreは2.</description>
    </item>
    
    <item>
      <title>OpenCoverでVS2017でビルドした.NETプロジェクトのカバレッジを測る</title>
      <link>https://budougumi0617.github.io/post/2017/07/13/opencover-to-vs2017/</link>
      <pubDate>Thu, 13 Jul 2017 09:25:36 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/13/opencover-to-vs2017/</guid>
      <description>TL;DR OpenCoverでVisual Studio2017でビルドした.NET Core/Standardのプロジェクトのコードカバレッジを計測したいときは、.csprojファイルにDebugTypeをfullで追加すること。
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netstandard1.6&amp;lt;/TargetFramework&amp;gt; &amp;lt;DebugType&amp;gt;full&amp;lt;/DebugType&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;/Project&amp;gt;  OpenCoverでカバレッジが計測できない。 Visual Studio2017から.NET Core, .NET Standardのプロジェクトの構成ファイル(.csproj)の形式が変更になっています。
++C++; // 未確認飛行 C - 新しい csproj 形式
これに合わせてか、ビルド時に生成されるPDBファイル(.pdb)の情報ファイルの内容も変更になっているようです。 そのため、通常従来の形式を期待して.pdbファイルを解析するOpenCoverをそのまま使ってもカバレッジは計測できません。
ProcessModel: Default DomainUsage: Single Execution Runtime: net-3.5 .Cannot instrument C:\projects\testable\Testable.Tests\bin\Debug\Testable.dll as no PDB/MDB could be loaded . Tests run: 2, Errors: 0, Failures: 0, Inconclusive: 0, Time: 1.4310438 seconds Not run: 0, Invalid: 0, Ignored: 0, Skipped: 0 Committing...  解決方法 これを解消するには、.</description>
    </item>
    
    <item>
      <title>このブログについて</title>
      <link>https://budougumi0617.github.io/post/2017/07/11/about-this-site/</link>
      <pubDate>Tue, 11 Jul 2017 10:06:36 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/07/11/about-this-site/</guid>
      <description>C#とかGolangなど、いろいろと手を出している筆者がハマったところを書いていきます。 今まではQiitaに書いていましたが、個人ブログで書くことにしました。
About Me  1986/06/17 ソフトウェアエンジニア@五反田 GitHub Twitter Qiita  CoreSkill  C# UWP .NET Standard Golang  RubyやElixirなどもやってます。</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://budougumi0617.github.io/post/2017/06/hello-hugo/</link>
      <pubDate>Sun, 25 Jun 2017 20:20:50 +0900</pubDate>
      
      <guid>https://budougumi0617.github.io/post/2017/06/hello-hugo/</guid>
      <description>I got new blog by hugo.
知っていれば何てことはない。ただ、知らないとけっこうハマる、そんなことを書いていきます。</description>
    </item>
    
  </channel>
</rss>
